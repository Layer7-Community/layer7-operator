apiVersion: security.brcmlabs.com/v1
kind: Gateway
metadata:
  name: ssg
spec:
  version: "10.1.00"
  license:
    accept: "true"
    secretName: gateway-license
  app:
    replicas: 1
    image: docker.io/caapim/gateway:10.1.00
    imagePullSecrets: []
    imagePullPolicy: IfNotPresent
    serviceAccountName: default
    updateStrategy:
      type: rollingUpdate
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 2
    resources:
      requests:
        memory: 4Gi
        cpu: 2
      limits:
        memory: 4Gi
        cpu: 2
    autoscaling:
      enabled: true
      hpa:
        minReplicas: 1
        maxReplicas: 3
        metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 300
            policies:
            - type: Pods
              value: 1
              periodSeconds: 60
          scaleUp:
            stabilizationWindowSeconds: 0
            policies:
            - type: Percent
              value: 100
              periodSeconds: 15
    repository:
      enabled: false
      # one of initContainer/restman
      # Restman is not compatible with the embedded database
      method: init
      init:
        name: bundle-init
        image: docker.io/layer7api/bundle-init:0.0.1
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /opt/SecureSpan/Gateway/node/default/etc/bootstrap/bundle/initBundles
          name: git
      name: gateway-bundles
      url: https://github.com/Layer7-Community/l7bundlerepo
      bundleDirectory: bundles
    hazelcast:
      external: false
      endpoint: hazelcast.example.com:5701
    initContainers: []
    # - name: bundle-bootstrap
    #   image: docker.io/layer7api/bundle-init:0.0.1
    #   imagePullPolicy: Always
    #   volumeMounts:
    #   - mountPath: /opt/SecureSpan/Gateway/default/etc/bootstrap/bundle/initBundles
    #     name: git
      #bundlePath: bundles
    #bundle: []
    # - type: configMap
    #   name: config-bundle
    #   configMap:
    #     defaultMode: 420
    #     optional: false
    #     name: bundle-1
    # - type: secret
    #   name: secret-bundle
    # - type: secret
    #   name: csi-secret-bundle
    #   csi:
    #     driver: secrets-store.csi.k8s.io
    #     readOnly: true
    #     volumeAttributes:
    #       secretProviderClass: "vault-database"

    management:
      secretName: gateway-secret
      #username: "admin"
      #password: "mypassword"
      # Management port requires a separate service...
      service:
        enabled: true
        #annotations:
          # cloud.google.com/load-balancer-type: "Internal"
        type: ClusterIP
        ports:
        - name: management
          port: 9443
          targetPort: 9443
          protocol: TCP   
      restman:
        enabled: false
      ## Reserved for future use
      graphman:
        enabled: false
      cluster:
        #password: "mypassword"
        hostname: "gateway.brcmlabs.com"
      database:
        enabled: false # this runs the gateway in dbbacked/ephemeral mode
      #  jdbcUrl: "jdbc:mysql://cluster1-haproxy.pxc.svc.cluster.local:3306/ssg"
      #  username: "gateway"
      #  password: "ACm8BDr3Rfk2Flx9V"
    java:
      jvmHeap: 2g
      extraArgs:
      - -Dcom.l7tech.bootstrap.autoTrustSslKey=trustAnchor,TrustedFor.SSL,TrustedFor.SAML_ISSUER
      - -Dcom.l7tech.server.audit.message.saveToInternal=false
      - -Dcom.l7tech.server.audit.admin.saveToInternal=false
      - -Dcom.l7tech.server.audit.system.saveToInternal=false
      - -Dcom.l7tech.server.audit.log.format=json
      - -Djava.util.logging.config.file=/opt/SecureSpan/Gateway/node/default/etc/conf/log-override.properties
      - -Dcom.l7tech.server.pkix.useDefaultTrustAnchors=true -Dcom.l7tech.security.ssl.hostAllowWildcard=true
    listenPorts:
      harden: false
      tlsVersions:
      - TLSv1.2
      - TLSv1.3
      #- TLSv1.0
      #- TLSv.1.1
      cipherSuites:
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
      - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
      - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
      - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
      - TLS_DHE_RSA_WITH_AES_256_CBC_SHA
      - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
      - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
      - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
      - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
      - TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
      - TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
      - TLS_DHE_RSA_WITH_AES_128_CBC_SHA
      - TLS_AES_256_GCM_SHA384
      - TLS_AES_128_GCM_SHA256
    # - TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    # - TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    # - TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    # - TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    # - TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    # - TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    # - TLS_RSA_WITH_AES_256_GCM_SHA384
    # - TLS_RSA_WITH_AES_256_CBC_SHA256
    # - TLS_RSA_WITH_AES_256_CBC_SHA
    # - TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    # - TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    # - TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    # - TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    # - TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    # - TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    # - TLS_RSA_WITH_AES_128_GCM_SHA256
    # - TLS_RSA_WITH_AES_128_CBC_SHA256
    # - TLS_RSA_WITH_AES_128_CBC_SHA
    cwp:
      enabled: false
      properties:
        - name: io.httpsHostAllowWildcard
          value: true
        - name: log.levels
          value: |
            com.l7tech.level = CONFIG
            com.l7tech.server.policy.variable.ServerVariables.level = SEVERE
            com.l7tech.external.assertions.odata.server.producer.jdbc.GenerateSqlQuery.level = SEVERE
            com.l7tech.server.policy.assertion.ServerSetVariableAssertion.level = SEVERE
            com.l7tech.external.assertions.comparison.server.ServerComparisonAssertion = SEVERE
        - name: audit.setDetailLevel.FINE
          value: 152 7101 7103 9648 9645 7026 7027 4155 150 4716 4114 6306 4100 9655 150 151 11000 4104
    system:
      properties: |-
        # Default Gateway system properties
        # Configuration properties for shared state extensions.
        com.l7tech.server.extension.sharedKeyValueStoreProvider=embeddedhazelcast
        com.l7tech.server.extension.sharedCounterProvider=ssgdb
        com.l7tech.server.extension.sharedClusterInfoProvider=ssgdb
        # By default, FIPS module will block an RSA modulus from being used for encryption if it has been used for
        # signing, or visa-versa. Set true to disable this default behaviour and remain backwards compatible.
        com.safelogic.cryptocomply.rsa.allow_multi_use=true
        # Specifies the type of Trust Store (JKS/PKCS12) provided by AdoptOpenJDK that is used by Gateway.
        # Must be set correctly when Gateway is running in FIPS mode. If not specified it will default to PKCS12.
        javax.net.ssl.trustStoreType=jks
        com.l7tech.server.clusterStaleNodeCleanupTimeoutSeconds=86400
        # Additional properties go here
    service:
      # annotations:
      type: ClusterIP
      ports:
      - name: https
        port: 8443
        targetPort: 8443
        protocol: TCP
      # - name: management
      #   port: 9443
      #   targetPort: 9443
      #   protocol: "TCP"
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      tls:
      - hosts: 
        - gateway.brcmlabs.com
        secretName: brcmlabs
      - hosts:
        - test.example.com
        secretName: default
      rules:
      - host: gateway.brcmlabs.com
      - host: test1.example.com
          
      
        
